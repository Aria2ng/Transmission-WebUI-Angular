{"version":3,"names":[],"mappings":"","sources":["transmission.js"],"sourcesContent":["/**\r\n * Created by vincent on 2017/3/5.\r\n */\r\ndefine([\"jquery\", \"lodash\"], function ($, _) {\r\n    \"use strict\";\r\n\r\n    //解析对象是否为空对象\r\n    var isEmptyObj = function (obj) {\r\n        var p, c = true;\r\n        for (p in obj) {\r\n            if (p === undefined) {\r\n                c = true;\r\n                break;\r\n            } else {\r\n                c = false;\r\n            }\r\n        }\r\n        return c;\r\n    };\r\n\r\n    //ng异步promise\r\n    var ngAjaxPromise = function (op) {\r\n        // op = {\r\n        //     type:\"\", get或者post\r\n        //     url:\"\", 请求地址\r\n        //     param:{}/\"\",请求的参数\r\n        //     err:\"\",报错时的提示文字\r\n        //     $http:{},ng $http对象\r\n        //     $q:{},ng $q对象\r\n        //     cancel:true 是否可以取消\r\n        // }\r\n        var dfd = op.$q.defer();\r\n\r\n        //设置异步对象\r\n        var ajax = {};\r\n        switch (op.type) {\r\n            case \"post\":\r\n                ajax = op.$http.post(op.url, op.param);\r\n                break;\r\n            case \"get\":\r\n                ajax = op.param.params ? op.$http.get(op.url, op.param) : op.$http.get(op.url + op.param);\r\n                break;\r\n            case \"put\":\r\n                ajax = op.$http.put(op.url, op.param);\r\n                break;\r\n            case \"patch\":\r\n                ajax = op.$http.patch(op.url, op.param);\r\n                break;\r\n            case \"delete\":\r\n                ajax = op.$http.delete(op.url, op.param);\r\n                break;\r\n        }\r\n\r\n        op.$q.when(ajax,function (response, status, headers, config) {\r\n            dfd.resolve(response);\r\n        },function (response, status) {\r\n            if (status !== 0) {\r\n                dfd.reject({\r\n                    errService:op.errService ? op.errService : \"Service Error\",\r\n                    err:op.err,\r\n                    response:response\r\n                });\r\n            }\r\n        });\r\n\r\n        return op.cancel?dfd:dfd.promise;\r\n    };\r\n\r\n    //解析数据，保留小数点2位并转换为数字类型\r\n    var parseZero = function (num) {\r\n        return num === 0 ? 0 : parseFloat(num.toFixed(2));\r\n    };\r\n\r\n    //容量自动转换器\r\n    var bytesConvert = function (op) {\r\n        // op = {\r\n        //     \"data\": number,需要转换单位的数据，数字类型\r\n        //     \"customUnit\": \"bits\",自定义单位，转换后将会变成K+自定义单位，例如Kbits\r\n        //     \"band\": 1024,转换单位时的整除数，默认是1000(可选参数)\r\n        //     \"minUnit\": \"K\",最小单位，默认为K，当低于K时，需要显示正数时则设为minUnit:true，目前暂时只支持到最小到K和K以下(可选参数)\r\n        //     \"spliceUnit\": true但你需要分开数字和单位时，则需要此参数。输出的数据则变为对象{num:number,unit:\"string\"}(可选参数)\r\n        // }\r\n        var num = \"\";\r\n        var unit = \"\";\r\n        var band = op.band ? op.band : 1000;\r\n\r\n        op.minUnit = op.minUnit ? op.minUnit : \"K\";\r\n\r\n        if (op.minUnit === true) {\r\n            if (op.data < band) {\r\n                num = op.data;\r\n                unit = \"B\";\r\n            }\r\n\r\n            if (op.data >= band && op.data < Math.pow(band, 2)) {\r\n                num = (op.data / Math.pow(band, 1));\r\n                unit = \"KB\";\r\n            }\r\n        }\r\n\r\n        if (op.minUnit === \"K\") {\r\n            if (op.data < Math.pow(band, 2)) {\r\n                num = (op.data / Math.pow(band, 1));\r\n                unit = \"KB\";\r\n            }\r\n        }\r\n\r\n        if (op.data >= Math.pow(band, 2) && op.data < Math.pow(band, 3)) {\r\n            num = (op.data / Math.pow(band, 2));\r\n            unit = \"MB\";\r\n        }\r\n\r\n        if (op.data >= Math.pow(1024, 3) && op.data < Math.pow(band, 4)) {\r\n            num = (op.data / Math.pow(band, 3));\r\n            unit = \"GB\";\r\n        }\r\n\r\n        if (op.data >= Math.pow(1024, 4)) {\r\n            num = (op.data / Math.pow(band, 4));\r\n            unit = \"TB\";\r\n        }\r\n\r\n        function isPositiveNum(s) {//是否为正整数\r\n            var re = /^[0-9]*[1-9][0-9]*$/;\r\n            return re.test(s);\r\n        }\r\n\r\n        if (num === 0) {\r\n            num = 0;\r\n        }\r\n\r\n        if (num > 0) {\r\n            if (isPositiveNum(num) === false) {\r\n                num = num.toFixed(2);\r\n            }\r\n        }\r\n\r\n        unit = op.customUnit !== undefined ? unit.replace(\"B\", op.customUnit) : unit;\r\n\r\n        return op.spliceUnit === true ? {num: num, unit: unit} : num + unit;\r\n    };\r\n\r\n    //流量自动转换器\r\n    var flowConvert = function (op) {\r\n        return bytesConvert(op);\r\n    };\r\n\r\n    //获取指定日期的时间戳，正整数为今天以后，负整数为今天以前，0为今天\r\n    var getDay = function (op) {\r\n        if (!op) {\r\n            op = {};\r\n        }\r\n        if (op.type === undefined) {\r\n            op.type = \"YYYY/MM/DD\";\r\n        }\r\n\r\n        var $fulldate = \"\";\r\n        var date = new Date();\r\n        var MS = (function () {\r\n            return 1000 * 60 * 60 * 24 * (op.days !== undefined ? op.days : 1);\r\n        })();\r\n\r\n        var theDayObj = new Date();\r\n        var theDayMS = date.getTime() + MS;\r\n\r\n        theDayObj.setTime(theDayMS);\r\n\r\n        //读取默认格式\r\n        if (op.type === \"YYYY/MM/DD\") {\r\n            $fulldate = theDayObj.getFullYear() + \"/\" + (theDayObj.getMonth() + 1) + \"/\" + theDayObj.getDate();\r\n        }\r\n\r\n        //是否以此时此刻开始计算\r\n        if (op.now === true) {\r\n            $fulldate += \" \" + theDayObj.getHours() + \":\" + theDayObj.getMinutes() + \":\" + theDayObj.getSeconds();\r\n        } else {\r\n            $fulldate += \" 00:00:00\";\r\n        }\r\n\r\n        //是否需要转换成毫秒\r\n        if (op.needMS === true) {\r\n            $fulldate = new Date($fulldate).getTime();\r\n        }\r\n\r\n        return $fulldate;\r\n    };\r\n\r\n    //转换时间中小时，分钟，秒小于10的时候拼接为00:00:00格式\r\n    var parseDate = function (YY, MM, DD) {\r\n        var $date = \"\";\r\n\r\n        if (YY === 0 && MM === 0 && DD === 0) {\r\n            $date = \"\";\r\n        } else {\r\n            if (YY < 10) {\r\n                $date += \"0\" + YY;\r\n            } else {\r\n                $date += YY;\r\n            }\r\n\r\n            if (MM < 10) {\r\n                $date += \"-0\" + MM;\r\n            } else {\r\n                $date += \"-\" + MM;\r\n            }\r\n\r\n            if (DD !== undefined) {\r\n                if (DD < 10) {\r\n                    $date += \"-0\" + DD;\r\n                } else {\r\n                    $date += \"-\" + DD;\r\n                }\r\n            }\r\n        }\r\n        return $date;\r\n    };\r\n\r\n    //转换时间中小时，分钟，秒小于10的时候拼接为00:00:00格式\r\n    var parseTime = function (HH, MM, SS) {\r\n        var $time = \"\";\r\n\r\n        if (HH === 0 && MM === 0 && SS === 0) {\r\n            $time = \"\";\r\n        } else {\r\n            if (HH < 10) {\r\n                $time += \"0\" + HH;\r\n            } else {\r\n                $time += HH;\r\n            }\r\n\r\n            if (MM < 10) {\r\n                $time += \":0\" + MM;\r\n            } else {\r\n                $time += \":\" + MM;\r\n            }\r\n\r\n            if (SS !== undefined) {\r\n                if (SS < 10) {\r\n                    $time += \":0\" + SS;\r\n                } else {\r\n                    $time += \":\" + SS;\r\n                }\r\n            }\r\n        }\r\n        return $time;\r\n    };\r\n\r\n    var parseFullDate = function (date, simple) {\r\n        var $date = new Date(date);\r\n        var fullDate = parseDate($date.getFullYear(), $date.getMonth() + 1, $date.getDate());\r\n        var fullTime = parseTime($date.getHours(), $date.getMinutes(), $date.getSeconds());\r\n        return simple !== true ? fullDate + \" \" + fullTime : fullDate;\r\n    };\r\n\r\n    var secondsToTime = function (second) {\r\n        if (!second) {\r\n            return 0;\r\n        }\r\n        var time = '';\r\n        if(second >= 24 * 3600 * 365){\r\n            time += parseInt(second / (24 * 3600 * 365)) + '年';\r\n            second %= 24 * 3600 * 365;\r\n        }\r\n\r\n        if (second >= 24 * 3600) {\r\n            time += parseInt(second / (24 * 3600)) + '天';\r\n            second %= 24 * 3600;\r\n        }\r\n        if (second >= 3600) {\r\n            time += parseInt(second / 3600) + '小时';\r\n            second %= 3600;\r\n        }\r\n        if (second >= 60) {\r\n            time += parseInt(second / 60) + '分钟';\r\n            second %= 60;\r\n        }\r\n        if (second > 0) {\r\n            time += second + '秒';\r\n        }\r\n        return time;\r\n    };\r\n\r\n    //保留小数点后面两位并转化为浮点数字类型\r\n    var parseFloat2 = function (num) {\r\n        return parseFloat((parseZero(num)).toFixed(2));\r\n    };\r\n\r\n    //当目标滚动窗口时，目标对象距离当前窗口顶部0像素时，固定此对象在窗口顶部（fixed）\r\n    function FixedBar(op) {\r\n        this.target = $(\"#\" + op.id);\r\n        this.classname = \"fixed\";\r\n        this.scroll = function () {\r\n            var $this = this;\r\n            setTimeout(function () {\r\n                var objTop = $this.target.offset().top;\r\n                var objWidth = $this.target.width();\r\n                $(window).scroll(function () {\r\n                    if ($(this).scrollTop() >= objTop) {\r\n                        $this.target.addClass($this.classname);\r\n                        $this.target.css({\"width\": objWidth});\r\n                    } else {\r\n                        $this.target.removeClass($this.classname);\r\n                        $this.target.css({\"width\": \"auto\"});\r\n                    }\r\n                });\r\n            }, 300);\r\n        };\r\n        this.init = function () {\r\n            this.scroll();\r\n        };\r\n        this.init();\r\n    }\r\n\r\n    //多选框绑定组件\r\n    var checkboxGroup = function CheckboxGroup(op, scope) {\r\n        /*例子\r\n         checkboxGroup({\r\n         \"source\": $scope.checkBoxData,//数据源\r\n         \"initBind\": [\"checkedBoxes\",$scope.initData],//[ng绑定的选中变量,初始化选中的数据]\r\n         \"getCheckedBind\":[\"getChecked\",\"checkReuslt\"]//[ng绑定获取结果数据的方法名,ng绑定结果数据]\r\n         },$scope);\r\n         */\r\n\r\n        //初始化数据\r\n        this.sourceData = op.source;\r\n        this.initData = op.initBind ? op.initBind[1] : false;\r\n\r\n        //初始化各checkbox是否选中\r\n        this.initCheckboxGroup = function (op) {\r\n            //设置所有checkbox默认为都不选中\r\n            var arr = [];\r\n            var l = op.source.length;\r\n            for (var i = 0; i < l; i++) {\r\n                arr.push(false);\r\n            }\r\n\r\n            //如果存在初始化数据，则将iniData数据做匹配，将对应arr中的check位置改为true\r\n            if (op.initData) {\r\n                var initLength = op.initData.length;\r\n                for (var k = 0; k < initLength; k++) {\r\n                    var $this = op.initData[k];\r\n                    for (var j = 0; j < l; j++) {\r\n                        if ($this === op.source[j]) {\r\n                            arr[k] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            scope.tests = \"3\";\r\n            return arr;\r\n        };\r\n\r\n        //获取选中的checkbox数据\r\n        this.getChecked = function (op) {\r\n            var l = this.sourceData.length;\r\n            var arr = [];\r\n            for (var i = 0; i < l; i++) {\r\n                if (op.result[i] === true) {\r\n                    arr.push(this.sourceData[i]);\r\n                }\r\n            }\r\n            return arr;\r\n        };\r\n\r\n        //初始化多选框绑定组件\r\n        this.init = function () {\r\n            var $this = this;\r\n            var initOp = {\"source\": $this.sourceData};\r\n\r\n            if ($this.initData) {\r\n                initOp.initData = $this.initData;\r\n            }\r\n\r\n            var scopeCheckedVar = op.initBind[0];\r\n            var scopeGetCheckedFunc = op.getCheckedBind[0];\r\n            var scopeResultVar = op.getCheckedBind[1];\r\n\r\n            scope[scopeCheckedVar] = $this.initCheckboxGroup(initOp);\r\n            scope[scopeGetCheckedFunc] = function () {\r\n                scope[scopeResultVar] = $this.getChecked({\"result\": scope[scopeCheckedVar]});\r\n                console.log(scope[scopeResultVar]);\r\n            };\r\n        };\r\n        this.init();\r\n    };\r\n\r\n    //自适应高宽\r\n    var autosize = function (op) {\r\n        function parseSize(name, num) {\r\n            $(window).resize(function () {\r\n                if (($(window)[name]() - dif[name]) > num) {\r\n                    target[name]($(window)[name]() - dif[name]);\r\n                }\r\n            });\r\n            $(document).change(function () {\r\n                if (($(window)[name]() - dif[name]) > num) {\r\n                    target[name]($(window)[name]() - dif[name]);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (op) {\r\n            var target = op.target;\r\n            var H = $(window).height();\r\n            var W = $(window).width();\r\n            var targetH = target.height();\r\n            var targetW = target.width();\r\n            var dif = op.dif ? op.dif : {\"height\": 0, \"width\": 0};\r\n\r\n            if (op.autoset) {\r\n                if (op.autoset.width === true) {\r\n                    if (targetW < W) {\r\n                        target.width(W - dif);\r\n                    }\r\n                }\r\n\r\n                if (op.autoset.widthAuto === true) {\r\n                    parseSize(\"width\", targetW);\r\n                }\r\n\r\n                if (op.autoset.height === true) {\r\n                    if (targetH < H && (H - dif.height) > targetH) {\r\n                        target.height(H - dif.height);\r\n                    }\r\n                }\r\n\r\n                if (op.autoset.heightAuto === true) {\r\n                    parseSize(\"height\", targetH);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //批量/单个echart图表初始化。\r\n    var initEchart = function (op, echart) {\r\n        var charts = [];\r\n        var l = op.length;\r\n\r\n        if (op && l > 0) {\r\n            for (var i = 0; i < l; i++) {\r\n                charts.push(echart.init(document.getElementById(op[i].id)));\r\n                charts[i].setOption(op[i].option);\r\n            }\r\n\r\n            $(window).resize(function () {\r\n                for (var k = 0; k < l; k++) {\r\n                    charts[k].resize();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!l && op.id && op.option) {\r\n            charts = echart.init(document.getElementById(op.id));\r\n            charts.setOption(op.option);\r\n            $(window).resize(function () {\r\n                charts.resize();\r\n            });\r\n        }\r\n\r\n        return charts;\r\n    };\r\n\r\n    //图表组件默认颜色组\r\n    var colorGroup = [\"#F7DC6F\", \"#A9CCE3\", \"#D7BDE2\", \"#AF7AC5\", \"#26C6DA\", \"#7986CB\", \"#A3E4D7\", \"#52BE80\", \"#E59866\", \"#B2BABB\", \"#F1948A\", \"#3498DB\", \"#D0D3D4\", \"#E74C3C\", \"#9FA8DA\", \"#A1887F\", \"#C5E1A5\", \"#FFC107\"];\r\n\r\n    return {\r\n        \"isEmptyObj\": isEmptyObj,\r\n        \"ngAjaxPromise\": ngAjaxPromise,\r\n        \"parseZero\": parseZero,\r\n        \"flowConvert\": flowConvert,\r\n        \"bytesConvert\": bytesConvert,\r\n        \"getDay\": getDay,\r\n        \"parseDate\": parseDate,\r\n        \"parseTime\": parseTime,\r\n        \"parseFullDate\": parseFullDate,\r\n        \"parseFloat2\": parseFloat2,\r\n        \"FixedBar\": FixedBar,\r\n        \"checkboxGroup\": checkboxGroup,\r\n        \"autoSize\": autosize,\r\n        \"initEchart\": initEchart,\r\n        \"colorGroup\": colorGroup,\r\n        \"secondsToTime\":secondsToTime\r\n    };\r\n});"],"file":"../transmission.min.js"}